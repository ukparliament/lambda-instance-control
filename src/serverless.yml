# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: instance-control

plugins:
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:account-alias}
  region: eu-west-1
  timeout: 300

  # environment:

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:BatchGetItem"
        - "dynamodb:GetItem"
        - "dynamodb:GetRecords"
      Resource:
        - "Fn::Join":
          - ":"
          -
            - "arn:aws:dynamodb"
            - Ref: "AWS::Region"
            - Ref: "AWS::AccountId"
            - "table/credential-store"
    - Effect: "Allow"
      Action:
        - "kms:Decrypt"
      Resource: "${opt:credstash-key}"


package:
  include:
    - "*.py"
  exclude:
    - requirements.txt 
    - node_modules/**
    - tests/**

resources:
  Resources:
    InstanceControlRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: InstanceControlRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: PdsInstanceControlRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "ec2:DescribeInstances"
                    - "ec2:StartInstances"
                    - "ec2:StopInstances"
                    - "kms:CreateGrant"
                    - "autoscaling:DescribeAutoScalingGroups"
                    - "autoscaling:SuspendProcesses"
                    - "autoscaling:ResumeProcesses"
                    - "autoscaling:DescribeAutoScalingInstances"
                  Resource: "*"


functions:
  instance_control:
    handler: instance_control.instance_control
    role: InstanceControlRole
    events:
      - schedule: cron(0 * ? * MON-FRI *)

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"


custom:
  pythonRequirements:
    # Need to do this to get Python 3.6 rather than 3.5 on Ubuntu 16.04 and older
    dockerizePip: true